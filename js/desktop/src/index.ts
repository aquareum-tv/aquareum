import "source-map-support/register";
import { app, BrowserWindow, autoUpdater, dialog } from "electron";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
import makeNode from "./node";
import getEnv from "./env";
import initUpdater from "./updater";
import { UpdateSourceType } from "update-electron-app";

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = async (): Promise<void> => {
  try {
    initUpdater();
    const { skipNode, nodeFrontend } = getEnv();
    let loadAddr;
    if (!skipNode) {
      const { proc, addr } = await makeNode();
      loadAddr = addr;
      let running = true;
      app.on("before-quit", () => {
        proc.kill("SIGTERM");
      });
      proc.on("exit", () => {
        running = false;
        app.quit();
      });
    }
    // Create the browser window.
    const mainWindow = new BrowserWindow({
      height: 600,
      width: 800,
      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      },
      // titleBarStyle: "hidden",
      // titleBarOverlay: true,
    });

    mainWindow.removeMenu();

    if (nodeFrontend) {
      mainWindow.loadURL(loadAddr);
    } else {
      mainWindow.loadURL("http://localhost:38081");
    }
  } catch (e) {
    console.error(e);
    const dialogOpts: Electron.MessageBoxOptions = {
      type: "info",
      buttons: ["Quit Aquareum"],
      title: "Error on Bootup",
      message: "Please report to the Aquareum developers at git.aquareum.tv!",
      detail: e.message + "\n" + e.stack,
    };

    await dialog.showMessageBox(dialogOpts);
    app.quit();
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  // if (BrowserWindow.getAllWindows().length === 0) {
  // }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
