include: ".ci/dockerfile-hash.yaml"

builder:
  stage: build
  interruptible: true
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  variables:
    FQ_IMAGE_NAME: "$CI_REGISTRY_IMAGE:builder-$DOCKERFILE_HASH"
  timeout: 2 hours
  script:
    - /kaniko/executor
      --build-arg TARGETARCH=amd64
      --build-arg DOCKERFILE_HASH=$DOCKERFILE_HASH
      --cache=true
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/docker/build.Dockerfile"
      --destination "$FQ_IMAGE_NAME"

builder-rebuild:
  stage: build
  allow_failure: true
  interruptible: true
  image:
    name: curlimages/curl:latest
    entrypoint: [""]
  needs:
    - job: builder
  timeout: 2 hours
  script:
    - echo "CI_PIPELINE_ID=$CI_PIPELINE_ID"
    - echo "CI_PIPELINE_ID=$CI_PIPELINE_IID"
    - echo "CI_PROJECT_ID=$CI_PROJECT_ID"
    - >
      curl
      --data-raw '{"project_id": "'$CI_PROJECT_ID'", "pipeline_id": "'$CI_PIPELINE_ID'", "job_token": "'$CI_JOB_TOKEN'"}'
      --fail-with-body
      https://retry-gitlab.iameli.workers.dev/

build:
  stage: build
  interruptible: true
  image: "$CI_REGISTRY_IMAGE:builder-$DOCKERFILE_HASH"
  timeout: 2 hours
  script:
    - rm -rf /usr/x86_64-w64-mingw32/include/d3dcompiler.h /usr/share/mingw-w64/include/d3dcompiler.h
    - git fetch --unshallow || echo 'already unshallow'
    - make ci -j$(nproc)
  artifacts:
    reports:
      dotenv: .ci/build.env

test:
  stage: build
  interruptible: true
  image: "$CI_REGISTRY_IMAGE:builder-$DOCKERFILE_HASH"
  timeout: 2 hours
  script:
    - git fetch --unshallow || echo 'already unshallow'
    - make ci-test -j$(nproc)

build-docker-amd64:
  stage: build
  interruptible: true
  needs:
    - job: build
      artifacts: true
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  timeout: 2 hours
  script:
    - /kaniko/executor
      --build-arg TARGETARCH=amd64
      --build-arg AQUAREUM_URL=$AQUAREUM_URL_LINUX_AMD64
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/docker/release.Dockerfile"
      --destination "$CI_REGISTRY_IMAGE:$AQUAREUM_BRANCH-amd64"
      --destination "$CI_REGISTRY_IMAGE:$AQUAREUM_VERSION-amd64"

build-docker-arm64:
  stage: build
  interruptible: true
  needs:
    - job: build
      artifacts: true
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  timeout: 2 hours
  script:
    - /kaniko/executor
      --build-arg TARGETARCH=arm64
      --build-arg AQUAREUM_URL=$AQUAREUM_URL_LINUX_ARM64
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/docker/release.Dockerfile"
      --destination "$CI_REGISTRY_IMAGE:$AQUAREUM_BRANCH-arm64"
      --destination "$CI_REGISTRY_IMAGE:$AQUAREUM_VERSION-arm64"
      --customPlatform=linux/arm64

build-docker-manifest:
  stage: build
  interruptible: true
  image:
    name: curlimages/curl:latest
    entrypoint: [""]
  needs:
    - job: build-docker-arm64
    - job: build-docker-amd64
    - job: build
      artifacts: true
  before_script:
    - curl -s -L https://github.com/estesp/manifest-tool/releases/download/v2.1.7/binaries-manifest-tool-2.1.7.tar.gz | tar xvz
    - mv manifest-tool-linux-amd64 ./manifest-tool
    - chmod +x ./manifest-tool
  timeout: 2 hours
  script:
    - ./manifest-tool --username "${CI_REGISTRY_USER}" --password "${CI_REGISTRY_PASSWORD}" push from-args
      --platforms linux/amd64,linux/arm64
      --template $CI_REGISTRY_IMAGE:$AQUAREUM_VERSION-ARCH
      --tags $AQUAREUM_BRANCH
      --target $CI_REGISTRY_IMAGE:$AQUAREUM_VERSION

build-android:
  stage: build
  interruptible: true
  image: "$CI_REGISTRY_IMAGE:builder-$DOCKERFILE_HASH"
  timeout: 2 hours
  script:
    - git fetch --unshallow || echo 'already unshallow'
    - make ci-android -j$(nproc)

build-mac:
  stage: build
  interruptible: true
  image: ghcr.io/cirruslabs/macos-runner:sonoma
  tags:
    - tart-installed
  timeout: 2 hours
  script:
    - git fetch --unshallow || echo 'already unshallow'
    - brew install ninja go openssl@3 && go version
    - sudo gem install --user-install xcpretty
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup.sh && bash rustup.sh -y && rm rustup.sh
    - export PATH="$PATH:$HOME/.cargo/bin:$(find $HOME/.gem/ruby -type d -name bin -maxdepth 2)"
    - >
      brew install python@3.11
      && python3.11 -m pip install virtualenv
      && python3.11 -m virtualenv ~/venv
      && source ~/venv/bin/activate
      && pip3 install meson
      && make ci-macos -j16

windows-selftest:
  stage: build
  tags:
    - windows
  timeout: 2 hours
  needs:
    - job: build
      artifacts: true
  variables:
    MSYSTEM: "MINGW32"
    CHERE_INVOKING: "yes"
  script:
    - C:\msys64\usr\bin\bash -lc "bash -x ./util/windows-selftest.sh $AQUAREUM_DESKTOP_URL_WINDOWS_AMD64"

release:
  stage: build
  interruptible: true
  image: "$CI_REGISTRY_IMAGE:builder-$DOCKERFILE_HASH"
  needs:
    - build-mac
    - build-android
    - build-docker-amd64
    - build-docker-arm64
    - build-docker-manifest
    - build
    - windows-selftest
    - test
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v?\d+\.\d+\.\d+$/'
  timeout: 2 hours
  script:
    - make ci-release
